#!/bin/sh

echo ""
echo "Starting TokuDB backup"
echo ""

usage(){
	echo ""
	echo "toku_backup is a wrapper shell script for the Toku Backup Plugin.  This is used to help automate the backup process for TokuDB backups."
	echo ""
	echo "Usage for $0 : "
	echo " By default the script will look for ~/.my.cnf and try to connect to the database.  If username and password are needed please provide as shown below"
	echo " Script has to be run on the TokuDB MySQL server it is backing up" 
	echo " -u	Provide MySQL username"
	echo " -p	Provide MySQL password"
	echo " -d	Defaults configuration file that contains the client configuration user and password.  DEFAULT VALUE : ~/.my.cnf"
	echo " -b	Backup Location.  Will be created if it does not exist.  REQUIRED"
	echo " -r	Retain the specified number of backups that start with tokubackup_.  Any amount of backups greater than the number will be deleted.  DEFAULT VALUE : Unlimited"
	echo " -c	Specify your MySQL configuration file to backup.  DEFAULT VALUE : /etc/my.cnf or /etc/mysql/my.cnf"
	echo ""
	echo "Examples :"
	echo " $0 -u root -p password -b /backup"
	echo " $0 -d /root/.my.cnf -b /backup -r 5"
	echo ""
	exit 1
}
	
# Validate Arguments

while [ "$#" -gt 0 ]; do
	case "$1" in
		-u) MYSQL_USER="$2"; shift 2;;
		-p) MYSQL_PASS="$2"; shift 2;;
		-d) DEFAULTS="$2"; shift 2;;
		-b) BACKUP_PATH="$2"; shift 2;;
		-r) RETAIN="$2"; shift 2;;
		-c) CONFIG="$2"; shift 2;;
		-*) echo "unknown option: $1" >&2; usage; exit 1;;
		*) echo "unrecognized argument: $1"; usage; exit 1;;
  	esac
done

[ -z "${DEFAULTS}" -a -z "${MYSQL_USER}" ] && echo "ERROR: MySQL credentials are not defined.  Please set either defaults file or MySQL Username and Password!" && usage && exit 1
[ -z "${BACKUP_PATH}" ] && echo "ERROR: You have not specified a backup path!" && usage && exit 1
[ ${BACKUP_PATH#${BACKUP_PATH%?}} == "/" ] && BACKUP_PATH="${BACKUP_PATH%?}"
[ `id -u` -ne 0 ] && echo "ERROR: Script must be run as root" && exit 1

# Build MySQL Connection

echo "MySQL Connectivity"
CONN_PARAM=''
if [ ${MYSQL_USER} ]; then
	echo "    Checking with Username ${MYSQL_USER} and password if set"
        CONN_PARAM="-B -N -u${MYSQL_USER}"
	if [ ${MYSQL_PASS} ]; then
		CONN_PARAM="${CONN_PARAM} -p${MYSQL_PASS}"
	fi
elif [ ${DEFAULTS} ]; then
	echo "    Checking MySQL connectivity using defaults file ${DEFAULTS}"
        CONN_PARAM="--defaults-file=${DEFAULTS} -B -N"
else
	CONN_PARAM="-B -N"
fi

[ `mysql $CONN_PARAM -e "SHOW DATABASES" | grep mysql | wc -l` -eq 0 ] && echo "ERROR: Unable to connect to MySQL" && usage && exit 1 
echo "    MySQL connectivity verified"

# Create New Backup Sub Directory

echo ""
echo "Starting TokuDB Backup"
[ ! -d "${BACKUP_PATH}" ] && echo "    Creating backup path ${BACKUP_PATH} and setting MySQL as the owner" && mkdir -p $BACKUP_PATH && chown mysql:mysql $BACKUP_PATH 
FULL_BACKUP_PATH="${BACKUP_PATH}/tokubackup_"`date +%Y%m%d.%H%M%S`
[ ! -d "${FULL_BACKUP_PATH}" ] && echo "    Creating backup path ${FULL_BACKUP_PATH} and setting MySQL as the owner" && mkdir $FULL_BACKUP_PATH && chown mysql:mysql $FULL_BACKUP_PATH

# Removing lost and found in the MySQL data dir as this will cause tokubackup to throw an error
DATA_DIR=`mysql $CONN_PARAM -e "SHOW VARIABLES LIKE 'datadir';" | awk '{print $2}'`
[ ${DATA_DIR#${DATA_DIR%?}} == "/" ] && DATA_DIR="${DATA_DIR%?}"
[ -e "${DATA_DIR}/lost+found" ] && echo "    Found ${DATA_DIR}/lost+found.  Ensuring MySQL owns this directory." && chown -R mysql:mysql ${DATA_DIR}/lost+found  

LOG_DIR=`mysql $CONN_PARAM -e "SHOW VARIABLES LIKE 'log_bin_basename';" | awk '{print $2}' | xargs dirname`
[ -e "${LOG_DIR}/lost+found" ] && echo "    Found ${LOG_DIR}/lost+found.  Ensuring MySQL owns this directory." && chown -R mysql:mysql ${LOG_DIR}/lost+found

# Validate MySQL has write access to the destination specified

su - mysql -c "touch ${FULL_BACKUP_PATH}/testfile"
if [ $? -eq 0 ]; then
	rm -rf ${FULL_BACKUP_PATH}/testfile
else
	echo "ERROR: MySQL user does not have the necessary access to the full path ${FULL_BACKUP_PATH}.  "
	echo ""
	exit 1
fi

# Backing up configuration

if [ ${CONFIG} ]; then
        if [ ! -e ${CONFIG} ]; then
                echo "    You have specified a configuration file that does not exist : ${CONFIG}" 
                exit 1
        else
                echo "    Copying configuration file : $CONFIG --> $FULL_BACKUP_PATH"
                cp $CONFIG $FULL_BACKUP_PATH;
        fi
else
        if [ ! -e '/etc/my.cnf' -a ! -e '/etc/mysql/my.cnf' ]; then
                echo "    Unable to find a configuration file to backup at /etc/my.cnf or /etc/mysql/my.cnf"
                exit 1
        else
                [ -e '/etc/my.cnf' ] && echo "    Copying configuration file : /etc/my.cnf --> $FULL_BACKUP_PATH/my.cnf" && cp '/etc/my.cnf' $FULL_BACKUP_PATH/my.cnf
                [ -e '/etc/mysql/my.cnf' ] && echo "    Copying configuration file : /etc/mysql/my.cnf --> $FULL_BACKUP_PATH/my.cnf" && cp '/etc/my.cnf' $FULL_BACKUP_PATH/my.cnf
        fi
fi

# Starting database backup

mysql $CONN_PARAM -e "set tokudb_backup_dir='${FULL_BACKUP_PATH}'" > /dev/null &

sleep 1 
echo "    Backup Status : "
while [ `mysql $CONN_PARAM -e "SELECT state FROM INFORMATION_SCHEMA.PROCESSLIST" | grep tokudb | wc -l` -gt 0 ]
do 
	mysql $CONN_PARAM -e "SELECT CONCAT('        ',state) FROM INFORMATION_SCHEMA.PROCESSLIST" | grep tokudb
	sleep 1
done 
echo "    Backup Complete!"

# Final Steps

echo ""
echo "Final steps"
echo "    Backup Size : "`du -sh $FULL_BACKUP_PATH`

if [ ${RETAIN} ]; then
	echo "    Starting cleanup of old backups"
	NUM_BACKUPS=`ls -1 ${BACKUP_PATH} | grep tokubackup_ | wc -l`
	echo "    # of backups currently : ${NUM_BACKUPS}"
	echo "    Retaining ${RETAIN} backups"
	while [ ${RETAIN} -lt `ls -1 ${BACKUP_PATH} | grep tokubackup_ | wc -l` ]
	do
		TO_DELETE=`ls -t $BACKUP_PATH | grep tokubackup_ | tail -n 1`
		echo "        Deleting ${BACKUP_PATH}/${TO_DELETE}"	
		rm -rf $BACKUP_PATH/$TO_DELETE
	done
fi
